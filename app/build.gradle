apply plugin: 'com.android.application'
apply plugin: 'retrolambda'

retrolambda {}

def revisionHash = ["sh",  "-c",  "cd ${project.rootDir} ; git rev-parse --short HEAD"].execute().in.text.trim()
def version = new Version(file("VERSION").readLines()[0], revisionHash);

android {
    //TODO: android-L対応
    //compileSdkVersion "android-L"
    compileSdkVersion 19
    buildToolsVersion '20.0.0'

    defaultConfig {
        applicationId "net.ichigotake.android.yancha.app"
        minSdkVersion 16
        targetSdkVersion 19
        //TODO: android-L対応
        //targetSdkVersion "android-L"
        versionCode version.toVersionCode()
        versionName version.toVersionName()
    }

    signingConfigs {
        release {
            storeFile file(project.properties.storeFile)
            storePassword project.properties.storePassword
            keyAlias project.properties.storeAlias
            keyPassword project.properties.keyPassword
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            zipAlign true
            debuggable false
            runProguard true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

repositories {
    mavenCentral()
}

dependencies {
    //yanchaのSocket.IOと互換性のあるSocket.IOクライアントがAndroid向けのライブラリとして提供されているものが少ない
    //現在依存しているSocket.IOライブラリは、更新が1年以上止まっているが、今は動作優先でこれを利用する
    //リニューアルに関して一通りの実装が落ち着いた頃にSocket.IOクライアントに関して再考する
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile project(':vendor:YanchaSDK:sdk')
    compile 'com.nhaarman.listviewanimations:library:2.6.0'
    compile 'com.squareup.picasso:picasso:2.3.2'
    compile 'com.koushikdutta.async:androidasync:1.3.7'
    compile 'com.dmitriy-tarasov:android-intents:1.1.0'
}


// For DeployGate
apply plugin: 'deploygate'

deploygate {
    userName = project.properties.deployGateUserName
    token = project.properties.deployGateToken

    def apkDir = project.projectDir.getAbsolutePath() + "/build/outputs/apk"
    apks {
        Release {
            sourceFile = file("${apkDir}/app-release.apk")
            message = file("DEPLOYGATE").readLines()[0]
        }

    }

}
uploadDeployGateRelease.dependsOn ':app:assembleRelease'
uploadDeployGateRelease.doLast {
        def mappingTxt = project.projectDir.getAbsolutePath() + "/build/outputs/proguard/release/mapping.txt"
    ["curl", "https://app.crittercism.com/api_beta/proguard/${project.properties.crittercismApplicationId}",
     "-F", "proguard=@\"${mappingTxt}\"", "-F", "app_version=\"${version.toVersionName()}\"",
     "-F", "key=${project.properties.crittercismApiKey}"].execute()
}

/**
 * Representation of Semantic Version (major.minor.patch-level)
 *
 * Cloned from https://github.com/gfx/gradle-android-utils
 */
public class Version {
    public final int major;
    public final int minor;
    public final int patchLevel;
    public final String suffix;

    public final String source;

    public Version(String v, String suffix) {
        source = v.trim()

        def parts = source.split("\\.", 3)
        major = Integer.valueOf(parts[0])
        minor = Integer.valueOf(parts[1])
        patchLevel = Integer.valueOf(parts[2])
        this.suffix = suffix
    }

    @Override
    public String toString() {
        return String.format("%s (%s)", toVersionName(), toVersionCode())
    }

    public String toVersionName() {
        return suffix != null ? "${source}-${suffix}" : source;
    }

    public int toVersionCode() {
        return major * (1000 * 1000) + minor * 1000 + patchLevel;
    }
}